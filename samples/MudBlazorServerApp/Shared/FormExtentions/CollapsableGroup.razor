@inherits BlazorDynamics.Forms.Components.Layout.GroupLayoutBase

<div class="groupcomponent @ClassName" style="@Style">
    @if (RuleEffect != RuleEffect.HIDE)
    {
        @if (collapsed)
        {
            <MudCard>
                <MudCardHeader>
                    <MudStack AlignItems="AlignItems.Stretch" Row=true>
                        @if (!string.IsNullOrEmpty(Label))
                        {
                            <MudText>@Label</MudText>
                        }
                        <MudButton OnClick="@Toggle">Expand</MudButton>
                    </MudStack>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack>
                            <DynamicComponent Type=@GetTypeNameFor(HeaderModel) Parameters=@GetValidParametersFor(HeaderModel) />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudCard>

                <MudCardHeader>
                    <MudStack AlignItems="AlignItems.Stretch" Row=true>
                        @if (!string.IsNullOrEmpty(Label))
                        {
                            <MudText>@Label</MudText>
                        }
                        <MudButton OnClick="@Toggle">Collapse</MudButton>
                    </MudStack>
                </MudCardHeader>

                <MudCardContent>
                    <MudStack>
                        @foreach (var element in this.FormModel.SubElements)
                        {
                            <DynamicComponent Type=@GetTypeNameFor(element) Parameters=@GetValidParametersFor(element) />
                        }
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }
    }
</div>

@code {
    private bool collapsed;
    [Parameter]
    public bool StartCollapsed { get; set; } = true;

    [Parameter]
    public DynamicFormModel HeaderModel { get; set; } = new();

    protected override void OnInitialized()
    {
        collapsed = StartCollapsed; // Set the initial state only once
    }

    private void Toggle()
    {
        collapsed = !collapsed;
    }
}